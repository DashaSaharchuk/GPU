#define N (1024 * 1024)
#define FULL_DATA_SIZE (N * 20)
#include <stdlib.h>
#include <time.h>
#include <stdio.h>

__global__ void kernel(int *a, int *b, int *c) {
    int i = threadIdx.x;
    c[i] = a[i] + b[i];
}

__global__ void kernel2(int *a, int *b, int *c) {
    __shared__ float cache[256];
    int tid = threadIdx.x + blockIdx.x * blockDim.x;
    int cacheIndex = threadIdx.x;
    int temp = 0;
    while (tid < N) {
        temp += a[tid] * b[tid];
        tid += blockDim.x * gridDim.x;
    }
    cache[cacheIndex] = temp;
    __syncthreads();
    int i = blockDim.x / 2;
    while (i != 0) {
        if (cacheIndex < i) cache[cacheIndex] += cache[cacheIndex + i];
        __syncthreads();
        i /= 2;
    }
    if (cacheIndex == 0) c[blockIdx.x] = cache[0];
}


int main() {
    srand(time(NULL));
    cudaDeviceProp prop;
    int whichDevice;
    cudaGetDevice(&whichDevice);
    cudaGetDeviceProperties(&prop, whichDevice);
    if (!prop.deviceOverlap) {
        printf("Device does not support overlapping\n");
        return 0;
    }
    float elapsed_time;
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    int *dev_a;
    int *dev_a_p;
    int *h_a, *h_b;
    int *h_a_p, *h_b_p, *h_c_p;
    h_a = (int*) malloc(FULL_DATA_SIZE * sizeof(int));
    h_b = (int*) malloc(FULL_DATA_SIZE * sizeof(int));
    for (int i = 0; i < FULL_DATA_SIZE; i++) h_a[i] = rand() % 10000;
    cudaMalloc((void**)&dev_a, FULL_DATA_SIZE * sizeof(int));
    cudaEventRecord(start, 0);
    cudaMemcpy(dev_a, h_a, FULL_DATA_SIZE * sizeof(int), cudaMemcpyHostToDevice);
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);
    printf("Elapsed time host->device: %f\n", elapsed_time);
    cudaEventRecord(start, 0);
    cudaMemcpy(h_b, dev_a, FULL_DATA_SIZE * sizeof(int), cudaMemcpyDeviceToHost);
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);
    printf("Elapsed time device->host: %f\n", elapsed_time);
    cudaHostAlloc((void**)&h_a_p, FULL_DATA_SIZE * sizeof(int), cudaHostAllocDefault);
    cudaHostAlloc((void**)&h_b_p, FULL_DATA_SIZE * sizeof(int), cudaHostAllocDefault);
    cudaHostAlloc((void**)&h_c_p, FULL_DATA_SIZE * sizeof(int), cudaHostAllocDefault);
    cudaMalloc((void**)&dev_a_p, FULL_DATA_SIZE * sizeof(int));
    for (int i = 0; i < FULL_DATA_SIZE; i++) h_a_p[i] = rand() % 10000;
    cudaEventRecord(start, 0);
    cudaMemcpy(dev_a_p, h_a_p, FULL_DATA_SIZE * sizeof(int), cudaMemcpyHostToDevice);
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);
    printf("Elapsed time paged-locked host->device: %f\n", elapsed_time);
    cudaEventRecord(start, 0);
    cudaMemcpy(h_b_p, dev_a_p, FULL_DATA_SIZE * sizeof(int), cudaMemcpyDeviceToHost);
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);
    printf("Elapsed time paged-locked device->host: %f\n", elapsed_time);
    cudaFree(dev_a);
    cudaFree(dev_a_p);
    //
    cudaStream_t stream0, stream1;
    cudaStreamCreate(&stream0);
    cudaStreamCreate(&stream1);
    int *dev_a0, *dev_b0, *dev_c0, *dev_a1, *dev_b1, *dev_c1;
    cudaMalloc((void**)&dev_a0, FULL_DATA_SIZE * sizeof(int));
    cudaMalloc((void**)&dev_b0, FULL_DATA_SIZE * sizeof(int));
    cudaMalloc((void**)&dev_c0, FULL_DATA_SIZE * sizeof(int));
    cudaMalloc((void**)&dev_a1, FULL_DATA_SIZE * sizeof(int));
    cudaMalloc((void**)&dev_b1, FULL_DATA_SIZE * sizeof(int));
    cudaMalloc((void**)&dev_c1, FULL_DATA_SIZE * sizeof(int));
    for (int i = 0; i < FULL_DATA_SIZE; i++) {
        h_a_p[i] = i;
        h_b_p[i] = i;
    }
    cudaEventRecord(start, 0);
    for (int i = 0; i < FULL_DATA_SIZE; i += N * 2) {
        cudaMemcpyAsync(dev_a0, h_a_p + i, N * sizeof(int), cudaMemcpyHostToDevice, stream0);
        cudaMemcpyAsync(dev_a1, h_a_p + i + N, N * sizeof(int), cudaMemcpyHostToDevice, stream1);
        cudaMemcpyAsync(dev_b0, h_b_p + i, N * sizeof(int), cudaMemcpyHostToDevice, stream0);
        cudaMemcpyAsync(dev_b1, h_b_p + i + N, N * sizeof(int), cudaMemcpyHostToDevice, stream1);
        kernel <<< 1, N, 0, stream0 >>> (dev_a0, dev_b0, dev_c0);
        kernel <<< 1, N, 0, stream1 >>> (dev_a1, dev_b1, dev_c1);
        cudaMemcpyAsync(h_c_p + i, dev_c0, N * sizeof(int), cudaMemcpyDeviceToHost, stream0);
        cudaMemcpyAsync(h_c_p + i + N, dev_c1, N * sizeof(int), cudaMemcpyDeviceToHost, stream1);
    }
    cudaStreamSynchronize(stream0);
    cudaStreamSynchronize(stream1);
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);
    printf("Elapsed time add vectors: %f\n", elapsed_time);
    //
    cudaEventRecord(start, 0);
    for (int i = 0; i < FULL_DATA_SIZE; i += N * 2) {
        cudaMemcpyAsync(dev_a0, h_a_p + i, N * sizeof(int), cudaMemcpyHostToDevice, stream0);
        cudaMemcpyAsync(dev_a1, h_a_p + i + N, N * sizeof(int), cudaMemcpyHostToDevice, stream1);
        cudaMemcpyAsync(dev_b0, h_b_p + i, N * sizeof(int), cudaMemcpyHostToDevice, stream0);
        cudaMemcpyAsync(dev_b1, h_b_p + i + N, N * sizeof(int), cudaMemcpyHostToDevice, stream1);
        kernel2 <<< 1, N, 0, stream0 >>> (dev_a0, dev_b0, dev_c0);
        kernel2 <<< 1, N, 0, stream1 >>> (dev_a1, dev_b1, dev_c1);
        cudaMemcpyAsync(h_c_p + i, dev_c0, N * sizeof(int), cudaMemcpyDeviceToHost, stream0);
        cudaMemcpyAsync(h_c_p + i + N, dev_c1, N * sizeof(int), cudaMemcpyDeviceToHost, stream1);
    }
    cudaStreamSynchronize(stream0);
    cudaStreamSynchronize(stream1);
    int res = 0;
    for (int i = 0; i < FULL_DATA_SIZE; i++) res += h_c_p[i];
    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&elapsed_time, start, stop);
    printf("Elapsed time mul vectors: %f\n", elapsed_time);
    cudaFree(dev_a0);
    cudaFree(dev_a1);
    cudaFree(dev_b0);
    cudaFree(dev_b1);
    cudaFree(dev_c0);
    cudaFree(dev_c1);
    cudaFree(h_a_p);
    cudaFree(h_b_p);
    cudaFree(h_c_p);
    cudaEventDestroy(start);
    cudaEventDestroy(stop);
    cudaStreamDestroy(stream0);
    cudaStreamDestroy(stream1);
}
